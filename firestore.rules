service cloud.firestore{
  match /databases/{database}/documents {
    
    match /{documents=**} {
    		allow read: if false
    		allow write: if false
    }

    match /households/{householdId} {
			allow create: if isAuth()
                    && (
                      reqHasUsersField()
                      && request.resource.data.users.keys().hasOnly([request.auth.uid])
                      && request.resource.data.users[request.auth.uid] == true
                    )

      allow read: if (isAuth() && isResident()) || isAdmin()

			allow update: if (isAuth()
          					&& (
                    	!reqHasUsersField()
                		  || isHouseholdAdmin()
                    )) || isAdmin()
                    
      allow delete: if false

      function isHouseholdAdmin() { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.households.pivot.role == "admin" }
      function isResident() { return resource.data.users.keys().hasAll([request.auth.uid]) }
      function reqHasUsersField() { return request.resource.data.keys().hasAll(["users"]) }
    }

    match /users/{userId} {
      allow create: if false

      allow read: if (isAuth() && isSelf()) || isAdmin()

      allow update: if isAuth()
                    && (
                      !request.resource.data.keys().hasAll(["households"])
                      || (
                        !request.resource.data.households.keys().hasAll(["pivot"])
                        || (
                          !request.resource.data.households.pivot.keys().hasAll(["role"]) // cannot exist on update
                          && (
                            !request.resource.data.households.pivot.keys().hasAll(["accepted"]) // if exists; must be true
                            || request.resource.data.households.pivot.accepted == true)
                        )
                      )
                    )

      function isSelf() { return request.auth.uid == resource.data.id }
	  }

    match /sensors/{sensorId} {
      allow create: if false
      allow read:   if isAdmin()
      allow update: if isAdmin()
      allow delete: if false
    }

    match /base_stations/{baseStationId} {
      allow create: if false
      allow read:   if isAdmin()
      allow update: if isAdmin()
      allow delete: if false
    }

    function isAuth() { return (request.auth.uid != null) }
    function isAdmin() { return request.auth.token.isAdmin }
    
  }
}