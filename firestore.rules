service cloud.firestore{
	match /databases/{database}/documents {
		
		match /{documents=**} {
			allow read: if false
			allow write: if false
		}

		match /users/{userId} {
			allow create: if false

			allow read: if isSelf() || isAdmin()

			allow update: if ( isSelf()
							&& reqDataHasNo(['id', 'claims', 'email'])
							&& (
								reqDataHasNo(["households"]) // If request has no households field: allow
								|| (
									!request.resource.data.households.keys().hasAll(["pivot"]) // If request has no households.pivot field: allow
									|| (
										!request.resource.data.households.pivot.keys().hasAll(["role"]) // If request has no households.pivot.role field: allow
										&& (
											!request.resource.data.households.pivot.keys().hasAll(["accepted"]) 
											|| request.resource.data.households.pivot.accepted == true // If request has households.pivot.accepted it must be true
										) 
									)
								)
							)) || isSuperAdmin()

			allow delete: if false

			function isSelf() { return request.auth.uid == userId }
		}

		match /households/{householdId} {
			allow create: if isAuth()
							&& (
								reqHasUsersField()
								&& request.resource.data.users.keys().hasOnly([request.auth.uid])
								&& request.resource.data.users[request.auth.uid] == true
							)

			allow read: if isResident() || isAdmin()

			allow update: if (isAuth()
							&& (
								!reqHasUsersField()
								|| isHouseholdAdmin()
							)
						) || isAdmin()
							
			allow delete: if false

			function isHouseholdAdmin() { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.households.pivot.role == "admin" }
			function isResident() { return resource.data.users.keys().hasAll([request.auth.uid]) }
			function reqHasUsersField() { return request.resource.data.keys().hasAll(["users"]) }
		}

		match /sensors/{sensorId} {
			allow create: if false
			allow read:   if isAdmin()
			allow update: if isAdmin()
			allow delete: if false
		}

		match /base_stations/{baseStationId} {
			allow create: if false
			allow read:   if isAdmin()
			allow update: if isAdmin()
			allow delete: if false
		}

		function reqDataHasNo(fields) { return !request.resource.data.keys().hasAny(fields) }
		function isAuth() { return (request.auth.uid != null) }
		function isAdmin() { return request.auth.token.isAdmin || request.auth.token.isSuperAdmin }
		function isSuperAdmin() { return request.auth.token.isSuperAdmin }
	}
}