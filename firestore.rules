service cloud.firestore{
	match /databases/{database}/documents {

		match /{ documents=** }
		{
			allow read: if false
			allow write: if false
		}

		match /users/{ user }
		{
			allow create: if false

			allow read: if isSelf() || isAdmin()

			allow update: if ( isSelf()
							&& !requestHasAny(['id', 'claims', 'email'])
							&& (
								!requestHasAny(['households']) // If request has no households field: allow
								|| (
									!request.resource.data.households.keys().hasAll(['pivot']) // If request has no households.pivot field: allow
									|| (
										!request.resource.data.households.pivot.keys().hasAll(['role']) // If request has no households.pivot.role field: allow
										&& (
											!request.resource.data.households.pivot.keys().hasAll(['accepted']) 
											|| request.resource.data.households.pivot.accepted == true // If request has households.pivot.accepted it must be true
										) 
									)
								)
							)) || isAdmin()

			allow delete: if false

			// Helper functions
			function isSelf() { return request.auth.uid == user }
		}

		match /households/{ household }
		{
			allow create: if (isAuth() && (
									requestHasAll(['users', 'base_stations'])
								&&	request.resource.data.users.keys().hasOnly([request.auth.uid])
								&& 	request.resource.data.users[request.auth.uid] == true
							) || isAdmin())

			allow read: if isResident() || isAdmin()

			allow update: if (isAuth()
							&& (
								!requestHasAny(['users', 'sensors', 'base_stations']) // residents cannot update any relations
								|| (isHouseholdAdmin() && !requestHasAny(['base_stations'])) // household admins can update users and sensors
							)
						) || isAdmin()

			allow delete: if isAdmin()

			// Helper functions
			function isHouseholdAdmin() { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.households.pivot.role == "admin" }
			function isResident() { return resource.data.users.keys().hasAll([request.auth.uid]) }
		}

		match /sensors/{ sensor }
		{
			allow create: if false
			allow read:   if isAdmin() || isRelated()
			allow update: if !requestHasAny(['id', 'users']) && (isAdmin() || isRelated())
			allow delete: if (isRelated() && isHouseholdAdmin(getResidence())) || isAdmin()

			// Helper functions
			function isHouseholdAdmin(household) { return household.data.households.pivot.role == "admin" && household.data.households.id == resource.data.households.id }
			function isRelated() { return resource.data.users.keys().hasAll([request.auth.uid]) }
		}

		match /sensors_users/{ sensorUser }
		{
			allow create: if false
			allow read:   if isRelated()
			allow update: if isRelated() && !requestHasAny(['users', 'sensors'])
			allow delete: if false

			// Helper functions
			function isRelated() { return resource.data.users.id == request.auth.uid }
		}

		match /base_stations/{ baseStation }
		{
			allow create: if false
			allow read:   if isAuth() && (!baseStationIsClaimed() || isRelatedHouseholdResident())
			allow update: if isAuth() && (
									!baseStationIsClaimed() // only fields of unclaimed Base Stations can be updated
								&& 	request.resource.data.households.id is string // update data must contain households field with an id key of type string
								&& 	!requestHasAny(['id', 'pin', 'websocket']) // update data cannot contain fields: id, pin, websocket
							) || isAdmin()
			allow delete: if false

			// Helper functions
			function baseStationIsClaimed() { return resourceHasAny(['households']) }
			function isRelatedHouseholdResident() { return get(/databases/$(database)/documents/households/$(resource.data.households.id)).data.users.keys().hasAll([request.auth.uid]) }
		}

		// Helper functions
		function isAuth() { return (request.auth.uid != null) }
		function isAdmin() { return request.auth.token.isAdmin || request.auth.token.isSuperAdmin }
		function isSuperAdmin() { return request.auth.token.isSuperAdmin }
		function getResidence() { return get(/databases/$(database)/documents/users/$(request.auth.uid)) }
		function requestHasAny(fields) { return request.writeFields.hasAny(fields) }
		function requestHasAll(fields) { return request.resource.data.keys().hasAll(fields) }
		function resourceHasAny(fields) { return resource.data.keys().hasAny(fields) }
	}
}